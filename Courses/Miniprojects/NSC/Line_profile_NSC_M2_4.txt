Timer unit: 1e-06 s

Total time: 0.002189 s
File: NSC_miniproject_2.py
Function: equalisehistogram at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def equalisehistogram(reconstructIris,LimitValue):
     7                                           
     8         1          1.0      1.0      0.0      numberOfBins=256
     9         1        931.0    931.0     42.5      histE, bin_edgesE=np.histogram(reconstructIris,numberOfBins,range=(0,256),density=False)#create histogram
    10         1          2.0      2.0      0.1      imageDim=reconstructIris.shape 
    11         1          0.0      0.0      0.0      lowVal = 255.0
    12         1          1.0      1.0      0.0      higVal = 0.0
    13                                           
    14       257        200.0      0.8      9.1      for i in range(0,numberOfBins): #find the lowest and highest bin values where the frequency is higher than a specified LimitValue 
    15       256        308.0      1.2     14.1          if histE[i]>LimitValue:
    16        59         79.0      1.3      3.6              if bin_edgesE[i]<lowVal:
    17         1          1.0      1.0      0.0                  lowVal=bin_edgesE[i]
    18        59         75.0      1.3      3.4              if bin_edgesE[i]>higVal:
    19        59         55.0      0.9      2.5                  higVal=bin_edgesE[i]
    20                                           
    21         1        389.0    389.0     17.8      Equalised=(reconstructIris-lowVal)*(255/(higVal-lowVal))
    22         1         74.0     74.0      3.4      withoutovers=np.where(Equalised>255,255,Equalised)
    23         1         72.0     72.0      3.3      withoutunders=np.where(withoutovers<0,0,withoutovers) 
    24                                           
    25         1          1.0      1.0      0.0      return withoutunders

Total time: 1.69388 s
File: NSC_miniproject_2.py
Function: noiseremover at line 29

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                           @profile
    30                                           def noiseremover(sourceimage,HistoFrac,RecognitionValue): 
    31                                           
    32         1        215.0    215.0      0.0      numberOfBins=256
    33         1       1917.0   1917.0      0.1      hist, bin_edges=np.histogram(sourceimage,numberOfBins,range=(0,255),density=False)
    34         1          2.0      2.0      0.0      lowVal = 255.0
    35         1          1.0      1.0      0.0      higVal = 0.0
    36       257        190.0      0.7      0.0      for i in range(0,numberOfBins):#find the lowest and highest bin values where the frequency is higher than a specified RecognitionValue
    37       256        305.0      1.2      0.0          if hist[i]>RecognitionValue:
    38        59         61.0      1.0      0.0              if bin_edges[i]<lowVal:
    39         1          1.0      1.0      0.0                  lowVal=bin_edges[i]
    40        59         59.0      1.0      0.0              if bin_edges[i]>higVal:
    41        59         53.0      0.9      0.0                  higVal=bin_edges[i]
    42         1          3.0      3.0      0.0      ThresVal=lowVal+HistoFrac*(higVal-lowVal);
    43         1         47.0     47.0      0.0      reconstructIris=copy.deepcopy(sourceimage)
    44         1          2.0      2.0      0.0      imageDim=sourceimage.shape
    45         1          8.0      8.0      0.0      ref=np.empty(imageDim, dtype=bool)
    46         1         44.0     44.0      0.0      ref = sourceimage < ThresVal
    47         1        266.0    266.0      0.0      Coordinates = np.where(ref==True)
    48         1         19.0     19.0      0.0      processMap=copy.deepcopy(ref)
    49         1          2.0      2.0      0.0      NumberofEliminations=len(Coordinates[0])
    50         1          1.0      1.0      0.0      numberofUneliminatedNeighbors=0
    51         1          1.0      1.0      0.0      pixelVal=0
    52         1          1.0      1.0      0.0      SumVal=0
    53         1          7.0      7.0      0.0      UnprocessedPixels=copy.deepcopy(NumberofEliminations)
    54                                           
    55        96        100.0      1.0      0.0      while UnprocessedPixels>0: #While there are still pixels that have not been reconstructed 
    56    296115     307955.0      1.0     18.2          for ii in range(0,NumberofEliminations): #go through all of the eliminated pixels
    57    296020    1064505.0      3.6     62.8              if processMap[Coordinates[0][ii]][Coordinates[1][ii]]==True: #if the current pixel still has not been reconstructed then do reconstruction
    58      7797      16518.0      2.1      1.0                  if Coordinates[0][ii]-1>=0: #look at whether the neighbor pixel exist within the image boundary 
    59      3008      17069.0      5.7      1.0                      if processMap[Coordinates[0][ii]-1][Coordinates[1][ii]] == False and sourceimage[Coordinates[0][ii]-1][Coordinates[1][ii]] is not None: #make sure the neighbor pixel is not none and does not need reconstruction.
    60      2785      19657.0      7.1      1.2                          SumVal=SumVal+reconstructIris[Coordinates[0][ii]-1][Coordinates[1][ii]] #
    61      2785       3196.0      1.1      0.2                          numberofUneliminatedNeighbors = numberofUneliminatedNeighbors+1
    62      7797      14850.0      1.9      0.9                  if Coordinates[0][ii]+1<imageDim[0]:#make sure the neighbor is within the image boundary
    63      7795      41696.0      5.3      2.5                      if processMap[Coordinates[0][ii]+1][Coordinates[1][ii]] == False and sourceimage[Coordinates[0][ii]+1][Coordinates[1][ii]] is not None:
    64      5423      35784.0      6.6      2.1                          SumVal=SumVal+reconstructIris[Coordinates[0][ii]+1][Coordinates[1][ii]]
    65      5423       6158.0      1.1      0.4                          numberofUneliminatedNeighbors = numberofUneliminatedNeighbors+1
    66      7797      15945.0      2.0      0.9                  if Coordinates[1][ii]-1>=0: #make sure the neighbor is within the image boundary
    67      7676      38598.0      5.0      2.3                      if processMap[Coordinates[0][ii]][Coordinates[1][ii]-1] == False and sourceimage[Coordinates[0][ii]][Coordinates[1][ii]-1] is not None:
    68      3000       8419.0      2.8      0.5                          SumVal=SumVal+reconstructIris[Coordinates[0][ii]][Coordinates[1][ii]-1]
    69      3000       3049.0      1.0      0.2                          numberofUneliminatedNeighbors = numberofUneliminatedNeighbors+1
    70      7797      15758.0      2.0      0.9                  if Coordinates[1][ii]+1<imageDim[1]:#make sure the neighbor is within the image boundary
    71      7778      34597.0      4.4      2.0                      if processMap[Coordinates[0][ii]][Coordinates[1][ii]+1] == False and sourceimage[Coordinates[0][ii]][Coordinates[1][ii]+1] is not None: 
    72       898       2464.0      2.7      0.1                          SumVal=SumVal+reconstructIris[Coordinates[0][ii]][Coordinates[1][ii]+1]
    73       898        920.0      1.0      0.1                          numberofUneliminatedNeighbors = numberofUneliminatedNeighbors+1
    74                                                           #the numbers in the if statement below represents the number of included 
    75      7797       9765.0      1.3      0.6                  if numberofUneliminatedNeighbors==4 or numberofUneliminatedNeighbors==3 or numberofUneliminatedNeighbors==2:  
    76      3116       4087.0      1.3      0.2                       pixelVal=SumVal/numberofUneliminatedNeighbors
    77      3116       6843.0      2.2      0.4                       reconstructIris[Coordinates[0][ii]][Coordinates[1][ii]]=pixelVal
    78      3116       5918.0      1.9      0.3                       processMap[Coordinates[0][ii]][Coordinates[1][ii]]=False
    79      3116       3300.0      1.1      0.2                       UnprocessedPixels=UnprocessedPixels-1
    80      7797       7019.0      0.9      0.4                  SumVal=0
    81      7797       6506.0      0.8      0.4                  numberofUneliminatedNeighbors=0
    82         1          1.0      1.0      0.0      return reconstructIris