Timer unit: 1e-06 s

Total time: 0.132338 s
File: NSC_miniproject_2.py
Function: equalisehistogram at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def equalisehistogram(reconstructIris,LimitValue):
     7                                           
     8         1          1.0      1.0      0.0      numberOfBins=256
     9         1       1043.0   1043.0      0.8      histE, bin_edgesE=np.histogram(reconstructIris,numberOfBins,range=(0,256),density=False)#create histogram
    10         1          2.0      2.0      0.0      imageDim=reconstructIris.shape 
    11         1          1.0      1.0      0.0      lowVal = 255.0
    12         1          1.0      1.0      0.0      higVal = 0.0
    13                                           
    14       257        156.0      0.6      0.1      for i in range(0,numberOfBins): #find the lowest and highest bin values where the frequency is higher than a specified LimitValue 
    15       256        259.0      1.0      0.2          if histE[i]>LimitValue:
    16        59         55.0      0.9      0.0              if bin_edgesE[i]<lowVal:
    17         1          1.0      1.0      0.0                  lowVal=bin_edgesE[i]
    18        59         52.0      0.9      0.0              if bin_edgesE[i]>higVal:
    19        59         46.0      0.8      0.0                  higVal=bin_edgesE[i]
    20                                           
    21         1        339.0    339.0      0.3      Equalised=(reconstructIris-lowVal)*(255/(higVal-lowVal))
    22                                           
    23         1         68.0     68.0      0.1      withoutovers=np.where(Equalised>255,255,Equalised)
    24         1         65.0     65.0      0.0      withoutunders=np.where(withoutovers<0,0,withoutovers) 
    25                                               
    26        65         42.0      0.6      0.0      for p in range(0,imageDim[0]):#for all pixels in input image stretch the histogram and make sure that the values beyond the possible pixel values are set equal 0 or 255
    27     32832      25054.0      0.8     18.9           for c in range(0,imageDim[1]):
    28     32768      52047.0      1.6     39.3                if Equalised[p][c]<0:
    29       187        261.0      1.4      0.2                    Equalised[p][c]=0 
    30     32768      51962.0      1.6     39.3                if Equalised[p][c]>255:
    31       257        399.0      1.6      0.3                    Equalised[p][c]=255 
    32         1         58.0     58.0      0.0      hj=withoutunders==Equalised 
    33         1        247.0    247.0      0.2      hhh=np.where(hj==False)
    34         1        177.0    177.0      0.1      print(hhh)
    35         1          2.0      2.0      0.0      return Equalised

Total time: 1.69835 s
File: NSC_miniproject_2.py
Function: noiseremover at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                           @profile
    40                                           def noiseremover(sourceimage,HistoFrac,RecognitionValue): 
    41                                           
    42         1        339.0    339.0      0.0      numberOfBins=256
    43         1       1865.0   1865.0      0.1      hist, bin_edges=np.histogram(sourceimage,numberOfBins,range=(0,255),density=False)
    44         1          2.0      2.0      0.0      lowVal = 255.0
    45         1          1.0      1.0      0.0      higVal = 0.0
    46       257        218.0      0.8      0.0      for i in range(0,numberOfBins):#find the lowest and highest bin values where the frequency is higher than a specified RecognitionValue
    47       256        328.0      1.3      0.0          if hist[i]>RecognitionValue:
    48        59         69.0      1.2      0.0              if bin_edges[i]<lowVal:
    49         1          1.0      1.0      0.0                  lowVal=bin_edges[i]
    50        59         65.0      1.1      0.0              if bin_edges[i]>higVal:
    51        59         59.0      1.0      0.0                  higVal=bin_edges[i]
    52         1          2.0      2.0      0.0      ThresVal=lowVal+HistoFrac*(higVal-lowVal);
    53         1         49.0     49.0      0.0      reconstructIris=copy.deepcopy(sourceimage)
    54         1          3.0      3.0      0.0      imageDim=sourceimage.shape
    55         1          6.0      6.0      0.0      ref=np.empty(imageDim, dtype=bool)
    56         1         46.0     46.0      0.0      ref = sourceimage < ThresVal
    57         1        291.0    291.0      0.0      Coordinates = np.where(ref==True)
    58         1         18.0     18.0      0.0      processMap=copy.deepcopy(ref)
    59         1          2.0      2.0      0.0      NumberofEliminations=len(Coordinates[0])
    60         1          0.0      0.0      0.0      numberofUneliminatedNeighbors=0
    61         1          1.0      1.0      0.0      pixelVal=0
    62         1          1.0      1.0      0.0      SumVal=0
    63         1          6.0      6.0      0.0      UnprocessedPixels=copy.deepcopy(NumberofEliminations)
    64                                           
    65        96         96.0      1.0      0.0      while UnprocessedPixels>0: #While there are still pixels that have not been reconstructed 
    66    296115     294554.0      1.0     17.3          for ii in range(0,NumberofEliminations): #go through all of the eliminated pixels
    67    296020    1082782.0      3.7     63.8              if processMap[Coordinates[0][ii]][Coordinates[1][ii]]==True: #if the current pixel still has not been reconstructed then do reconstruction
    68      7797      15739.0      2.0      0.9                  if Coordinates[0][ii]-1>=0: #look at whether the neighbor pixel exist within the image boundary 
    69      3008      17528.0      5.8      1.0                      if processMap[Coordinates[0][ii]-1][Coordinates[1][ii]] == False and sourceimage[Coordinates[0][ii]-1][Coordinates[1][ii]] is not None: #make sure the neighbor pixel is not none and does not need reconstruction.
    70      2785      20370.0      7.3      1.2                          SumVal=SumVal+reconstructIris[Coordinates[0][ii]-1][Coordinates[1][ii]] #
    71      2785       3020.0      1.1      0.2                          numberofUneliminatedNeighbors = numberofUneliminatedNeighbors+1
    72      7797      14933.0      1.9      0.9                  if Coordinates[0][ii]+1<imageDim[0]:#make sure the neighbor is within the image boundary
    73      7795      42522.0      5.5      2.5                      if processMap[Coordinates[0][ii]+1][Coordinates[1][ii]] == False and sourceimage[Coordinates[0][ii]+1][Coordinates[1][ii]] is not None:
    74      5423      36186.0      6.7      2.1                          SumVal=SumVal+reconstructIris[Coordinates[0][ii]+1][Coordinates[1][ii]]
    75      5423       5829.0      1.1      0.3                          numberofUneliminatedNeighbors = numberofUneliminatedNeighbors+1
    76      7797      15393.0      2.0      0.9                  if Coordinates[1][ii]-1>=0: #make sure the neighbor is within the image boundary
    77      7676      38739.0      5.0      2.3                      if processMap[Coordinates[0][ii]][Coordinates[1][ii]-1] == False and sourceimage[Coordinates[0][ii]][Coordinates[1][ii]-1] is not None:
    78      3000       8391.0      2.8      0.5                          SumVal=SumVal+reconstructIris[Coordinates[0][ii]][Coordinates[1][ii]-1]
    79      3000       3008.0      1.0      0.2                          numberofUneliminatedNeighbors = numberofUneliminatedNeighbors+1
    80      7797      15363.0      2.0      0.9                  if Coordinates[1][ii]+1<imageDim[1]:#make sure the neighbor is within the image boundary
    81      7778      34632.0      4.5      2.0                      if processMap[Coordinates[0][ii]][Coordinates[1][ii]+1] == False and sourceimage[Coordinates[0][ii]][Coordinates[1][ii]+1] is not None: 
    82       898       2528.0      2.8      0.1                          SumVal=SumVal+reconstructIris[Coordinates[0][ii]][Coordinates[1][ii]+1]
    83       898        898.0      1.0      0.1                          numberofUneliminatedNeighbors = numberofUneliminatedNeighbors+1
    84                                                           #the numbers in the if statement below represents the number of included 
    85      7797       9307.0      1.2      0.5                  if numberofUneliminatedNeighbors==4 or numberofUneliminatedNeighbors==3 or numberofUneliminatedNeighbors==2:  
    86      3116       4111.0      1.3      0.2                       pixelVal=SumVal/numberofUneliminatedNeighbors
    87      3116       6859.0      2.2      0.4                       reconstructIris[Coordinates[0][ii]][Coordinates[1][ii]]=pixelVal
    88      3116       6074.0      1.9      0.4                       processMap[Coordinates[0][ii]][Coordinates[1][ii]]=False
    89      3116       3106.0      1.0      0.2                       UnprocessedPixels=UnprocessedPixels-1
    90      7797       6758.0      0.9      0.4                  SumVal=0
    91      7797       6251.0      0.8      0.4                  numberofUneliminatedNeighbors=0
    92         1          1.0      1.0      0.0      return reconstructIris