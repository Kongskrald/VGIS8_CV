def matlab_rsa_34():
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_input_actions_to_default()
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.0)
  set_gravity([0.0, 0.0, 9.82])
  def Safety_Program():
    global var_safety=0
    movej(get_inverse_kin(pose_add(get_forward_kin(), pose_sub(p[-.197452378433, -.201523379635, .235541764183, 3.136288328694, .000450041152, .021211904300],p[-.200000065488, -.199982410221, .199994502902, -3.141579017621, .000056423760, -.000008764730]))), a=1.3962634015954636, v=0.10471975511965977)
    sleep(1.0)
    socket_send_string("2")
  end
  def pgr_setupPose():
    pose_1=get_forward_kin()
    global pointer=0
    while (pointer<receive_data[0]):
      Move_To_Pos[pointer]=pose_1[pointer]
      global pointer=pointer+1
    end
  end
  def p01_readPosJ():
    pose_1=get_actual_joint_positions()
    socket_send_string(pose_1)
  end
  def p02_readPosC():
    # 'Read pose'
    pose_1=get_forward_kin()
    socket_send_string(pose_1)
  end
  def p08_readAnalog():
    receive_data=socket_read_ascii_float(2)
    if (receive_data[0] != 2):
      socket_send_string("0")
    else:
      socket_send_string("1")
      sleep(0.01)
      socket_send_string( analog_in[receive_data[1]] )
      global task=[0,0]
    end
  end
  def p09_readDigital():
    receive_data=socket_read_ascii_float(2)
    if (receive_data[0] != 2):
      socket_send_string("0")
    else:
      socket_send_string("1")
      sleep(0.01)
      if ( digital_in[receive_data[1]]  ==   True  ):
        socket_send_string("1")
      else:
        socket_send_string("0")
      end
      global task=[0,0]
    end
  end
  def p11_moveJ():
    # 'Move in joint space'
    receive_data=socket_read_ascii_float(6)
    if (receive_data[0] != 6):
      socket_send_string("0")
    else:
      socket_send_string("1")
      global var_moveType="j"
      global pointer=0
      while (pointer<receive_data[0]):
        Move_To_Joints[pointer]=receive_data[pointer+1]
        global pointer=pointer+1
      end
      global var_moving=1
      global task=[0,0]
    end
  end
  def p1x_moveL():
    # 'Move in joint space'
    receive_data=socket_read_ascii_float(6)
    if (receive_data[0] != 6):
      socket_send_string("0")
    else:
      socket_send_string("1")
      global var_moveType="l"
      global pointer=0
      while (pointer<receive_data[0]):
        Move_To_Pos[pointer]=receive_data[pointer+1]
        global pointer=pointer+1
      end
      global var_moving=1
      global task=[0,0]
    end
  end
  def p14_SetVelAcc():
    # 'velocity and acceleration parameters'
    receive_data=socket_read_ascii_float(6)
    if (receive_data[0] != 6):
      socket_send_string("0")
    else:
      socket_send_string("1")
      global pointer=0
      var_velacc[0]=receive_data[1]
      var_velacc[1]=receive_data[2]
      global task=[0,0]
    end
  end
  def p15_setIO():
    # 'Set I/O params'
    receive_data=socket_read_ascii_float(6)
    if (receive_data[0] != 6):
      socket_send_string("0")
    else:
      socket_send_string("1")
      if (receive_data[1] ==   True  ):
          digital_out[receive_data[2]]=  True
      else:
          digital_out[receive_data[2]]=  False
      end
      global task=[0,0]
    end
  end
  def p18_setRG2():
    # 'Set parameters for OnRobot RG2 gripper'
    receive_data=socket_read_ascii_float(6)
    if (receive_data[0] != 6):
      socket_send_string("0")
    else:
      socket_send_string("1")
      global DO8_Off_DO9_Off=receive_data[1]
      global DO8_On_DO9_Off=receive_data[2]
      global DO8_Off_DO9_On=receive_data[3]
      global DO8_On_DO9_On=receive_data[4]
      global Grip_Force=receive_data[5]
      if Grip_Force > 40:
      	Grip_Force = 40
      	popup("'Grip_Force' is too high - the value have been limited to  40N", title="Warning",  warning = True, error=False)
      	pause
      end
      
      if Grip_Force < 3:
      	Grip_Force = 3
      	popup("'Grip_Force' is too low - the value have been limited to  3N", title="Warning",  warning = True, error=False)
      	pause
      end
      
      if DO8_Off_DO9_Off > 110:
      	DO8_Off_DO9_Off = 110
      	popup("'DO8_Off_DO9_Off ' is too high - the value have been limited to  110mm", title="Warning",  warning = True, error=False)
      	pause
      end
      
      if DO8_Off_DO9_Off < 0:
      	DO8_Off_DO9_Off = 0
      	popup("'DO8_Off_DO9_Off ' is too low - the value have been limited to  0mm", title="Warning",  warning = True, error=False)
      	pause
      end
      
      if DO8_Off_DO9_On > 110:
      	DO8_Off_DO9_On = 110
      	popup("'DO8_Off_DO9_On ' is too high - the value have been limited to  110mm", title="Warning",  warning = True, error=False)
      	pause
      end
      
      if DO8_Off_DO9_On < 0:
      	DO8_Off_DO9_On = 0
      	popup("'DO8_Off_DO9_On ' is too low - the value have been limited to  0mm", title="Warning",  warning = True, error=False)
      	pause
      end
      
      
      
      
      if DO8_On_DO9_Off > 110:
      	DO8_On_DO9_Off = 110
      	popup("'DO8_On_DO9_Off ' is too high - the value have been limited to  110mm", title="Warning",  warning = True, error=False)
      	pause
      end
      
      if DO8_On_DO9_Off < 0:
      	DO8_On_DO9_Off = 0
      	popup("'DO8_On_DO9_Off ' is too low - the value have been limited to  0mm", title="Warning",  warning = True, error=False)
      	pause
      end
      
      if DO8_On_DO9_On > 110:
      	DO8_On_DO9_On = 110
      	popup("'DO8_On_DO9_On ' is too high - the value have been limited to  110mm", title="Warning",  warning = True, error=False)
      	pause
      end
      
      if DO8_On_DO9_On < 0:
      	DO8_On_DO9_On = 0
      	popup("'DO8_On_DO9_On ' is too low - the value have been limited to  0mm", title="Warning",  warning = True, error=False)
      	pause
      end
      
      
      #simple mapping
      force0 = floor(Grip_Force)
      pos0 = floor(DO8_On_DO9_On*10)
      force1 = floor(Grip_Force)
      pos1 = floor(DO8_Off_DO9_On*10)
      force2 = floor(Grip_Force)
      pos2 = floor(DO8_On_DO9_Off*10)
      force3 = floor(Grip_Force)
      pos3 = floor(DO8_Off_DO9_Off*10)
      def bit_bang_spi_master_UR_script(input):
      	local i = 0
      	while i < 8:
      		set_digital_out(8, True)
      
      		if input >= 128:
      			set_digital_out(9, False)
      			input = input - 128
      		 else:
      		  	set_digital_out(9, True)
      		  end
      		  input = input * 2
      		  sleep(0.008)
      		  set_digital_out(8, False)
      		  sleep(0.008)
      		  i = i + 1
        	end
      end
      
      
      
      version_number = 0
      length = 15
      
      set_digital_out(9, False)
      set_digital_out(8, False)
      set_tool_voltage(0)
      sleep(1.5)
      set_tool_voltage(24)
      sleep(0.032)
      set_tool_voltage(0)
      sleep(0.064)
      
      set_tool_voltage(24)
      sleep(0.032)
      set_tool_voltage(0)
      sleep(0.064)
      
      set_tool_voltage(24)
      sleep(0.032)
      set_tool_voltage(0)
      sleep(0.064)
      
      set_tool_voltage(24)
      sleep(0.032)
      set_tool_voltage(0)
      sleep(0.064)
      
      set_tool_voltage(24)
      
      
      timeout = 0
      while get_digital_in(8) == False:
      	timeout = timeout+1
      	sleep(0.008)
      	if timeout > 250:
      		popup("Gripper is not responding", title="Error",  warning = False, error=True)
      		return 1
      	end
      end
      
      
      
      timeout = 0
      while get_digital_in(9):
      	timeout = timeout+1
      	sleep(0.008)
      	if timeout > 250:
      		popup("Gripper is not responding", title="Error",  warning = False, error=True)
      		return 1
      	end
      end
      
      
      bit_bang_spi_master_UR_script(version_number)
      bit_bang_spi_master_UR_script(length)
      
      bit_bang_spi_master_UR_script(force0)
      bit_bang_spi_master_UR_script(pos0 - (floor(pos0/256)*256))
      bit_bang_spi_master_UR_script(floor(pos0/256))
      
      bit_bang_spi_master_UR_script(force1)
      bit_bang_spi_master_UR_script(pos1 - (floor(pos1/256)*256))
      bit_bang_spi_master_UR_script(floor(pos1/256))
      
      bit_bang_spi_master_UR_script(force2)
      bit_bang_spi_master_UR_script(pos2 - (floor(pos2/256)*256))
      bit_bang_spi_master_UR_script(floor(pos2/256))
      
      bit_bang_spi_master_UR_script(force3)
      bit_bang_spi_master_UR_script(pos3 - (floor(pos3/256)*256))
      bit_bang_spi_master_UR_script(floor(pos3/256))
      
      bit_bang_spi_master_UR_script(85)
      
      
      
      set_digital_out(9, False)
      set_digital_out(8, False)
      
      timeout = 0
      while get_digital_in(9) == True:
      	timeout = timeout+1
      	sleep(0.008)
      	if timeout > 250:
      		popup("Gripper is not responding", title="Error",  warning = False, error=True)
      		return 1
      	end
      end
      
      timeout = 0
      while get_digital_in(9) == False:
      	timeout = timeout+1
      	sleep(0.008)
      	if timeout > 250:
      		popup("Gripper is not responding", title="Error",  warning = False, error=True)
      		return 1
      	end
      end
      
      return 0
      global task=[0,0]
    end
  end
  $ 1 "BeforeStart"
  $ 2 "var_safety≔1"
  global var_safety=1
  $ 3 "var_safety_forc≔50"
  global var_safety_forc=50
  $ 4 "var_moveType≔'j'"
  global var_moveType="j"
  $ 5 "receive_data≔[6,0,0,0,0,0,0]"
  global receive_data=[6,0,0,0,0,0,0]
  $ 6 "Move_To_Pos≔p[0,0,0,0,0,0]"
  global Move_To_Pos=p[0,0,0,0,0,0]
  $ 7 "Move_To_Joints≔[0,0,0,0,0,0]"
  global Move_To_Joints=[0,0,0,0,0,0]
  $ 8 "var_moving≔0"
  global var_moving=0
  $ 9 "Call pgr_setupPose"
  pgr_setupPose()
  $ 10 "var_velacc≔[0.2,0.2]"
  global var_velacc=[0.2,0.2]
  $ 12 "socket_open('127.0.0.1',30000)"
  socket_open("127.0.0.1",30000)
  $ 13 "task≔[0,0]"
  global task=[0,0]
  $ 14 "coop≔0"
  global coop=0
  $ 52 "Thread_1"
  thread Thread_1():
    while (True):
      if (coop == 1):
        while (coop == 1):
          sleep(0.02)
          force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 2, [0.15, 0.15, 0.15, 1.0471975511965976, 1.0471975511965976, 1.0471975511965976])
          sleep(0.01)
          end_force_mode()
          stopl(5.0)
        end
        global coop=0
        pgr_setupPose()
      else:
        global thread_flag_60=0
        thread Thread_if_60():
          if (var_moving == 1):
            if (var_safety == 1):
              if (var_moveType == "j"):
                movej(Move_To_Joints,a=var_velacc[0],v=var_velacc[1],r=0)
                # 'TODO: Check if movement finished succesfully'
                socket_send_string("1")
                global var_moving=0
              else:
                if (var_moveType == "l"):
                  movel(Move_To_Pos,a=var_velacc[0],v=var_velacc[1],r=0)
                  if (pose_dist(get_forward_kin(),Move_To_Pos)<0.01):
                    socket_send_string("1")
                    global var_moving=0
                  end
                end
              end
            end
          end
          thread_flag_60 = 1
        end
        if (force()<var_safety_forc):
          global thread_handler_60=run Thread_if_60()
          while (thread_flag_60 == 0):
            if not(force()<var_safety_forc):
              kill thread_handler_60
              thread_flag_60 = 2
            else:
              sync()
            end
          end
        else:
          thread_flag_60 = 2
        end
        if (thread_flag_60 == 2):
          Safety_Program()
        end
        global cur_velvac=var_velacc
        sleep(0.01)
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  while (True):
    $ 15 "Robot Program"
    $ 16 "task=socket_read_ascii_float(1)"
    task=socket_read_ascii_float(1)
    $ 17 "Wait: 0.01"
    sleep(0.01)
    $ 18 "If task[1]≟1"
    if (task[1] == 1):
      $ 19 "Call p01_readPosJ"
      p01_readPosJ()
      $ 20 "task≔[0,0]"
      global task=[0,0]
    else:
      $ 21 "ElseIf task[1]≟2"
      if (task[1] == 2):
        $ 22 "Call p02_readPosC"
        p02_readPosC()
        $ 23 "task≔[0,0]"
        global task=[0,0]
      else:
        $ 24 "ElseIf task[1]≟8"
        if (task[1] == 8):
          $ 25 "Call p08_readAnalog"
          p08_readAnalog()
        else:
          $ 26 "ElseIf task[1]≟9"
          if (task[1] == 9):
            $ 27 "Call p09_readDigital"
            p09_readDigital()
          else:
            $ 28 "ElseIf task[1]≟11"
            if (task[1] == 11):
              $ 29 "Call p11_moveJ"
              p11_moveJ()
            else:
              $ 30 "ElseIf task[1]≟13"
              if (task[1] == 13):
                $ 31 "Call p1x_moveL"
                p1x_moveL()
              else:
                $ 32 "ElseIf task[1]≟14"
                if (task[1] == 14):
                  $ 33 "Call p14_SetVelAcc"
                  p14_SetVelAcc()
                else:
                  $ 34 "ElseIf task[1]≟15"
                  if (task[1] == 15):
                    $ 35 "Call p15_setIO"
                    p15_setIO()
                  else:
                    $ 36 "ElseIf task[1]≟18"
                    if (task[1] == 18):
                      $ 37 "Call p18_setRG2"
                      p18_setRG2()
                    else:
                      $ 38 "ElseIf task[1]≟93"
                      if (task[1] == 93):
                        $ 39 "coop≔1"
                        global coop=1
                        $ 40 "socket_send_string('1')"
                        socket_send_string("1")
                        $ 41 "task≔[0,0]"
                        global task=[0,0]
                      else:
                        $ 42 "ElseIf task[1]≟94"
                        if (task[1] == 94):
                          $ 43 "coop≔0"
                          global coop=0
                          $ 44 "socket_send_string('1')"
                          socket_send_string("1")
                          $ 45 "task≔[0,0]"
                          global task=[0,0]
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
